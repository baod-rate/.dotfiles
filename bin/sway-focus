#!/bin/zsh

zparseopts s=switcher r=reverse m:=move

if [ $#switcher -gt 0 ] ; then
  jq_filter='
      # descend to workspace or scratchpad
      .nodes[].nodes[]
      # save workspace name as .w
      | {"w": .name} + (
        if (.nodes|length) > 0 then # workspace
          [recurse(.nodes[])]
        else # scratchpad
          []
        end
        + .floating_nodes
        | .[]
        # select nodes with no children (windows)
        | select(.nodes==[])
      )
      | [
        "<span size=\"xx-small\">\(.id)</span>",
        # remove markup and index from workspace name, replace scratch with "[S]"
        "<span size=\"xx-small\">\(.w | gsub("^[^:]*:|<[^>]*>"; "") | sub("__i3_scratch"; "[S]"))</span>",
        # get app name (or window class if xwayland)
        "<span weight=\"bold\">\(if .app_id == null then .window_properties.class else .app_id end)</span>",
        "<span style=\"italic\">\(.name)</span>"
      ] | @tsv
  '

  swaymsg -t get_tree |
    jq -r "$jq_filter" |
    wofi -m --insensitive --show dmenu --prompt='Focus a window' |
    {
      read -r id name && swaymsg "[con_id=$id]" focus
    }
else
  output=$(
    swaymsg -t get_outputs |
    if [ ${#reverse} -eq 0 ] ; then
      jq -cr "sort_by(.rect.y, .rect.x) | .+. | until(.[0].focused==true; del(.[0])) | .[1].name"
    else
      jq -cr "sort_by(.rect.y, .rect.x) | .+. | reverse | until(.[0].focused==true; del(.[0])) | .[1].name"
    fi
  )
  (( ! $? )) || { printf '[sway-focus] failed to get next output: %s\n' "$swaymsg_output" >&2 ; exit 1 ; }

  if [ $#move -gt 0 ] ; then
    swaymsg_output=$(swaymsg move $move[2] to output $output)
    (( ! $? )) || { printf "[sway-focus] failed to move $move[2] to output $output: %s\n" "$swaymsg_output" >&2 ; exit 1 ; }
  fi

  swaymsg_output=$(swaymsg focus output $output)
  (( ! $? )) || { printf "[sway-focus] failed to focus output $output: %s\n" "$swaymsg_output" >&2 ; exit 1 ; }
fi
