# swaywm config file

### Variables
#
# reference:
#   xmodmap:  up to 4 keys per modifier, (keycodes in parentheses):
#
#   shift       Shift_L (0x32),  Shift_R (0x3e)
#   lock        Caps_Lock (0x42)
#   control     Control_L (0x25),  Control_R (0x69)
#   mod1        Alt_L (0x40),  Alt_R (0x6c),  Meta_L (0xcd)
#   mod2        Num_Lock (0x4d)
#   mod3
#   mod4        Super_L (0x85),  Super_R (0x86),  Super_L (0xce),  Hyper_L (0xcf)
#   mod5        ISO_Level3_Shift (0x5c),  Mode_switch (0xcb)

    # terminals
    # ---------
    # set $term "urxvtc ; if [ $? -eq 2 ]; then urxvtd -q -o -f && urxvtc || { swaynag -t warning -m 'Failed to launch urxvtd' ; urxvt ; } ; fi"
    set $term alacritty
    set $altterm xterm

    ### application launcher
    #
    # Note: it's recommended that you pass the final command to sway
    # set $menu dmenu_path | dmenu | xargs swaymsg exec
    #
    set $menu "rofi -modi combi -show combi -combi-modi 'drun,run,ssh,window'"

    # modifiers
    # ---------
    set $win Mod4
    set $mod Mod1

    # vim-style-direction keys
    # ------------------------
    set $left h
    set $down j
    set $up k
    set $right l

    set $wallpapers_path ~/wallpapers

### sway-specific configs
#
#
#
    set $wm_name sway
    set $nag_cmd swaynag
    set $msg_cmd swaymsg

    set $screenshot_script $HOME/bin/screenshot_wayland
    set $copy_cmd wl-copy

    # load other configs (including Base16 colors)
    include $XDG_CONFIG_HOME/sway/config.d/*

    ### Keybindings
    #
    #
    bindsym $mod+i swaybg_command swaybg `find $wallpapers_path -type f | shuf -n 1` fill

    ### Output configuration
    #
    #

    # wallpaper
    # ---------
    # Default wallpaper (more resolutions are available in __DATADIR__/backgrounds/sway/)
    # ex:
    #   output * bg /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
    # -----------------------------------------------------------------------------------
    output * bg `find $wallpapers_path -type f | shuf -n 1` fill

    # displays
    # --------
    # ex:
    #   output HDMI-A-1 resolution 1920x1080 position 1920,0
    # You can get the names of your outputs by running: swaymsg -t get_outputs
    # ------------------------------------------------------------------------
    # output DVI-I-1 transform 90
    # workspace 1 output DVI-D-1

    # bindsym $mod+shift+l exec 'swaylock -c 000000'

### Application behavior
#
#
    for_window [class="feh"] floating enable
    for_window [class="^Firefox Developer Edition$" instance="^Toolkit$"] floating enable

### Look
#
# Colors
# Values defined in $XDG_CONFIG_HOME/sway/config.d/base16-colors.config
#
    # ansi    Color        | base16 Description
    # -------------------- | ------------------
    # color00 Black        | base00 Default Background
    # color18              | base01 Lighter Background (Used for status bars)
    # color19              | base02 Selection Background
    # color08 Bright_Black | base03 Comments, Invisibles, Line Highlighting
    # color20              | base04 Dark Foreground (Used for status bars)
    # color07 White        | base05 Default Foreground, Caret, Delimiters, Operators
    # color21              | base06 Light Foreground (Not often used)
    # color15 Bright_White | base07 Light Background (Not often used)
    # color01 Red          | base08 Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted
    # color16              | base09 Integers, Boolean, Constants, XML Attributes, Markup Link Url
    # color03 Yellow       | base0A Classes, Markup Bold, Search Text Background
    # color02 Green        | base0B Strings, Inherited Class, Markup Code, Diff Inserted
    # color06 Cyan         | base0C Support, Regular Expressions, Escape Characters, Markup Quotes
    # color04 Blue         | base0D Functions, Methods, Attribute IDs, Headings
    # color05 Magenta      | base0E Keywords, Storage, Selector, Markup Italic, Diff Changed
    # color17              | base0F Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>

    ### Colors
    #
    # Color configuration for windows and borders using the Base16 variables
    #

    # Property Name         Border  BG      Text    Indicator Child Border
    client.focused          $base02 $base02 $base06 $base0B   $base0D
    client.focused_inactive $base01 $base01 $base03 $base0D   $base02
    client.unfocused        $base01 $base00 $base03 $base00   $base01
    client.urgent           $base08 $base08 $base00 $base08   $base08
    # i3-only
    client.placeholder      $base05 $base05 $base07 $base00   $base05
    client.background       $base02

    ### Window Decorations
    #
    default_border pixel 2
    default_floating_border pixel 2
    gaps inner 32
    gaps outer 16
    smart_borders on

    # Only enable gaps on a workspace when there is at least one container
    # smart_gaps on

    ### Font
    #
    # Font for window titles. Will also be used by the bar unless a different font
    # is used in the bar {} block below.
    #
    font pango:Overpass 9

    # This font is widely installed, provides lots of unicode glyphs, right-to-left
    # text rendering and scalability on retina/hidpi displays (thanks to pango).
    #font pango:DejaVu Sans Mono 8

    # Before i3 v4.8, we used to recommend this one as the default:
    # font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
    # The font above is very space-efficient, that is, it looks good, sharp and
    # clear in small sizes. However, its unicode glyph coverage is limited, the old
    # X core fonts rendering does not support right-to-left and this being a bitmap
    # font, it doesn’t scale on retina/hidpi displays.

### Basic Config
#
#
    focus_follows_mouse no

### Status Bar
#
# bar: `man 5 sway-bar` / `man i3bar`
# status: `man i3status`
#
    bar {
        position top

        workspace_buttons yes
        binding_mode_indicator yes

        tray_output none

        strip_workspace_numbers yes

        status_command "i3status --config ~/.config/i3status/essentials.conf | sed --unbuffered -e 's/#FF0000/$base08/g' -e 's/#00FF00/$base0B/g'"

        colors {
            background $base00
            separator  $base03
            statusline $base04

            # # Property Name         Border  BG      Text    Indicator Child Border
            # client.focused          $base02 $base02 $base06 $base0B   $base0D
            # client.focused_inactive $base01 $base01 $base03 $base0D   $base02
            # client.unfocused        $base01 $base00 $base03 $base00   $base01
            # client.urgent           $base08 $base08 $base00 $base08   $base08
            # # i3-only
            # client.placeholder      $base05 $base05 $base07 $base00   $base05
            # client.background       $base02

            # State             Border  BG      Text
            focused_workspace   $base02 $base02 $base07
            active_workspace    $base05 $base02 $base00
            inactive_workspace  $base00 $base00 $base05
            urgent_workspace    $base08 $base08 $base00
            binding_mode        $base00 $base0A $base00
        }
    }

    bar {
        position bottom

        # status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done
        # status_command i3status-rs ~/.config/i3status-rust/config.toml
        status_command "i3status --config ~/.config/i3status/stats.conf | sed --unbuffered -e 's/#FF0000/$base08/g' -e 's/#00FF00/$base0B/g'"

        workspace_buttons no
        binding_mode_indicator no

        tray_output *

        colors {
            background $base00
            separator  $base03
            statusline $base04
        }
    }


### Key bindings
#
# Basics:
#
    # start a terminal
    bindsym $mod+Return exec $term
    bindsym $mod+shift+Return exec $altterm

    # kill focused window
    bindsym $mod+shift+q kill

    # start your launcher
    bindsym $win+space exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    #
    # Sway: `floating_modifier <binding> [normal|inverse]`
    #   normal:  L:resizing | R:dragging
    #   inverse: L:dragging | R:resizing
    floating_modifier $mod

    # reload the configuration file
    bindsym $mod+shift+c reload

    # exit i3/sway (logs you out of your X/Wayland session)
    bindsym $mod+shift+e exec $nag_cmd -t warning -m 'You pressed the exit shortcut. Do you really want to exit $wm_name? This will end your Wayland session.' -B 'Yes, exit $wm_name' '$msg_cmd exit'

    # restart i3/sway inplace (preserves your layout/session, can be used to upgrade)
    bindsym $mod+shift+r restart

    # screenshots
    # bindsym $win+shift+3 exec shotgun ${XDG_PICTURES_DIR:-$HOME/pictures}/screenshot-desktop-$(date -Is).png
    bindsym $win+shift+4 exec $screenshot_script > ${XDG_PICTURES_DIR:-$HOME/pictures}/screenshot-region-$(date -Is).png
    bindsym $win+Ctrl+shift+4 exec $screenshot_script | $copy_cmd

#
# Windows / Containers
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # _move_ the focused window with the same, but add shift
    bindsym $mod+shift+$left move left
    bindsym $mod+shift+$down move down
    bindsym $mod+shift+$up move up
    bindsym $mod+shift+$right move right
    # ditto, with arrow keys
    bindsym $mod+shift+Left move left
    bindsym $mod+shift+Down move down
    bindsym $mod+shift+Up move up
    bindsym $mod+shift+Right move right

    bindsym --whole-window $mod+button4 workspace next_on_output
    bindsym --whole-window $mod+button5 workspace prev_on_output

#
# Outputs:
#
    bindsym $mod+bracketright focus output left
    bindsym $mod+bracketleft focus output right

    bindsym $mod+shift+bracketleft move container to output left; focus output left
    bindsym $mod+shift+bracketright move container to output right; focus output right

#
# Workspaces:
#
    # Define names for default workspaces for which we configure key bindings later on.
    # We use variables to avoid repeating the names in multiple places.
    set $ws1   "1:一"
    set $ws2   "2:二"
    set $ws3   "3:三"
    set $ws4   "4:四"
    set $ws5   "5:五"
    set $ws6   "6:六"
    set $ws7   "7:七"
    set $ws8   "8:八"
    set $ws9   "9:九"
    set $ws10 "10:十"

    # automatic workspace back-and-forth when switching to the
    # workspace that is currently focused
    workspace_auto_back_and_forth no

    # switch to workspace
    bindsym $mod+1 workspace $ws1
    bindsym $mod+2 workspace $ws2
    bindsym $mod+3 workspace $ws3
    bindsym $mod+4 workspace $ws4
    bindsym $mod+5 workspace $ws5
    bindsym $mod+6 workspace $ws6
    bindsym $mod+7 workspace $ws7
    bindsym $mod+8 workspace $ws8
    bindsym $mod+9 workspace $ws9
    bindsym $mod+0 workspace $ws10
    bindsym $mod+n workspace next
    bindsym $mod+p workspace prev
    bindsym $mod+Tab workspace back_and_forth

    # move focused container to workspace and follow
    bindsym $mod+shift+1 move container to workspace number $ws1 ; workspace number $ws1
    bindsym $mod+shift+2 move container to workspace number $ws2 ; workspace number $ws2
    bindsym $mod+shift+3 move container to workspace number $ws3 ; workspace number $ws3
    bindsym $mod+shift+4 move container to workspace number $ws4 ; workspace number $ws4
    bindsym $mod+shift+5 move container to workspace number $ws5 ; workspace number $ws5
    bindsym $mod+shift+6 move container to workspace number $ws6 ; workspace number $ws6
    bindsym $mod+shift+7 move container to workspace number $ws7 ; workspace number $ws7
    bindsym $mod+shift+8 move container to workspace number $ws8 ; workspace number $ws8
    bindsym $mod+shift+9 move container to workspace number $ws9 ; workspace number $ws9
    bindsym $mod+shift+0 move container to workspace number $ws10 ; workspace number $ws10
    bindsym $mod+shift+n move container to workspace next ; workspace next
    bindsym $mod+shift+p move container to workspace prev ; workspace prev
    bindsym $mod+shift+Tab move container to workspace back_and_forth ; workspace back_and_forth

#
# Move workspaces
#
    # Move workspace to a different output
    bindsym $mod+Ctrl+shift+$left move workspace to output left
    bindsym $mod+Ctrl+shift+$down move workspace to output down
    bindsym $mod+Ctrl+shift+$up move workspace to output up
    bindsym $mod+Ctrl+shift+$right move workspace to output right
    # ditto, with arrow keys
    bindsym $mod+Ctrl+shift+Left move workspace to output left
    bindsym $mod+Ctrl+shift+Down move workspace to output down
    bindsym $mod+Ctrl+shift+Up move workspace to output up
    bindsym $mod+Ctrl+shift+Right move workspace to output right

#
# Layout stuff:
#
    # "split" the current object of focus with
    bindsym $mod+v split horizontal
    bindsym $mod+s split vertical

    # Switch the current container between different layout styles
    bindsym $mod+q layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # enter fullscreen mode for the focused container
    bindsym $mod+f fullscreen toggle

    # Toggle sticky window
    bindsym $mod+shift+s sticky toggle

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # move focus to the parent container
    bindsym $mod+a focus parent

    # focus the child container
    bindsym $mod+z focus child

### Scratchpad
#
# a bag of holding for windows
# You can send windows there and get them back later.
#
    # Move the currently focused window to the scratchpad
    bindsym $mod+shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show

#
# Resizing containers:
#
mode "resize" {
    # These bindings trigger as soon as you enter the resize mode

    # change focus
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right

    # move (with sticky display-edge)
    bindsym $left  resize grow left  2 px or 2 ppt ; resize shrink right 2 px or 2 ppt
    bindsym $down  resize grow down  2 px or 2 ppt ; resize shrink up    2 px or 2 ppt
    bindsym $up    resize grow up    2 px or 2 ppt ; resize shrink down  2 px or 2 ppt
    bindsym $right resize grow right 2 px or 2 ppt ; resize shrink left  2 px or 2 ppt

    # shrink
    bindsym Ctrl+$left  resize shrink left  2 px or 2 ppt
    bindsym Ctrl+$down  resize shrink down  2 px or 2 ppt
    bindsym Ctrl+$up    resize shrink up    2 px or 2 ppt
    bindsym Ctrl+$right resize shrink right 2 px or 2 ppt

    # grow
    bindsym shift+$left  resize grow left  2 px or 2 ppt
    bindsym shift+$down  resize grow down  2 px or 2 ppt
    bindsym shift+$up    resize grow up    2 px or 2 ppt
    bindsym shift+$right resize grow right 2 px or 2 ppt

    # back to normal: Enter or Escape or $mod+r
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+r mode "default"
}
bindsym $mod+r mode "resize"

### Special buttons
#
# Volume Buttons:
#
    bindsym XF86AudioMute exec "pactl set-sink-mute $(pacmd list-sinks |awk '/* index:/{print $3}') toggle"
    bindsym XF86AudioRaiseVolume exec "pactl set-sink-volume $(pacmd list-sinks |awk '/* index:/{print $3}') +5%"
    bindsym XF86AudioLowerVolume exec "pactl set-sink-volume $(pacmd list-sinks |awk '/* index:/{print $3}') -5%"
    bindsym XF86AudioMicMute exec "pactl set-source-mute $(pacmd list-sources |awk '/* index:/{print $3}') toggle"

#
# Backlight Buttons:
#
    bindsym XF86MonBrightnessUp   exec "light -A 5"
    bindsym XF86MonBrightnessDown exec "light -U 5"
