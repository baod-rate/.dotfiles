" ==============================================================================
" .vimrc
" ==============================================================================
set nocompatible
set encoding=utf-8
filetype plugin indent on
syntax on
" ==============================================================================
" plugins
" ==============================================================================
" ================
" vim-plug grabber
" ================
let firstrun=0
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" =======
" plugins
" =======
call plug#begin('~/.vim/plugged')
" ------------
" colorschemes
" ------------
" Plug 'godlygeek/csapprox' " Make gvim-only colorschemes work in terminal vim
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/seoul256.vim'
Plug 'w0ng/vim-hybrid'
Plug 'jnurmine/Zenburn'
" ---------
" interface
" ---------
Plug 'itchyny/lightline.vim'
" -----
" tools
" -----
Plug 'terryma/vim-multiple-cursors'
Plug 'kien/ctrlp.vim'
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }
Plug 'jewes/Conque-Shell', { 'on': 'ConqueTerm' }
" ---------
" utilities
" ---------
Plug 'vimwiki/vimwiki'
" ----
" code
" ----
Plug 'vim-scripts/DoxygenToolkit.vim'
" Plug 'rhysd/vim-clang-format'
Plug 'majutsushi/tagbar'
Plug 'xolox/vim-misc'       " required by vim-easytags
Plug 'xolox/vim-easytags'
" ----------------
" neovim exclusive
" ----------------
if has('nvim')
  Plug 'benekastah/neomake'
else
  Plug 'scrooloose/syntastic'
endif
call plug#end()
" ====================
" vim-plug initializer
" ====================
if 1 == firstrun
    :PlugInstall
endif
" ==============================================================================
" options
" ==============================================================================
" ========
" mappings
" ========
map Y y$
let mapleader=","
nnoremap <silent> \ <C-W>
nnoremap <Space> za
" ------
" search
" ------
set showmatch       " jump to matching brace
set hlsearch        " highlight search matches
set incsearch       " jump to search result while typing
set ignorecase
set smartcase
" ==========
" formatting
" ==========
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set backspace=indent,eol,start
" -------
" folding
" -------
set foldmethod=indent   "fold based on indent
" set foldmethod=syntax
set foldnestmax=4       "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1
" =========
" interface
" =========
set showcmd         " Show (partial) command in status line
set mouse=a
set anti enc=utf-8
set relativenumber
set number
set ruler
" ------
" colors
" ------
let g:load_doxygen_syntax = 1
let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
set background=dark
if has("gui_running")
    colorscheme zenburn
else
    set t_Co=256
    colorscheme zenburn
endif
" colorscheme hybrid
" let g:hybrid_use_Xresources = 1
" let g:seoul256_background = 236
" colorscheme seoul256
" colorscheme solarized
" ----
" gvim
" ----
set guifont=DejaVu\ Sans\ Mono\ 8
" set guifont=DejaVu\ Sans\ Mono\ 8
"set guioptions-=m  " remove menu bar
"set guioptions-=T  " remove toolbar
"set guioptions-=r  " remove right-hand scroll bar
"set guioptions-=L  " remove left-hand scroll bar
set guioptions=ac   " autoselection and console only (no GUI prompt)
set splitbelow
set splitright
" ------------------
" tab and statusline
" ------------------
set laststatus=2
set showtabline=2
set guioptions-=e
" ---------
" long-line 
" ---------
set autoindent
set textwidth=79
set formatoptions=c,q,r
" ==============
" plugin options
" ==============
" ------
" ctrl-p
" ------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
" 'c' - the directory of the current file.
" 'r' - the nearest ancestor that contains one of these directories or files:
"       .git .hg .svn .bzr _darcs
" 'a' - like c, but only if the current working directory outside of CtrlP is
"       not a direct ancestor of the directory of the current file.
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
" -------------
" youcompleteme
" -------------
let g:ycm_global_ycm_extra_conf         = "~/.vim/.ycm_extra_conf.py"
let g:EclimCompletionMethod             = 'omnifunc'
let g:ycm_confirm_extra_conf            = "0"
let g:ycm_always_populate_location_list = 1
" -----------
" ConqueShell
" -----------
let g:ConqueTerm_PromptRegex = '^\w\+@[0-9A-Za-z_.-]\+:[0-9A-Za-z_./\~,:-]\+\$'
let g:ConqueTerm_FastMode = 1
let g:ConqueTerm_Color = 0
let g:ConqueTerm_InsertOnEnter = 0
let g:ConqueTerm_CloseOnEnd = 1
let g:ConqueTerm_CWInsert = 1
" ---------
" lightline
" ---------
let g:lightline = { 'colorscheme': 'jellybeans', }
" -------
" vimwiki
" -------
let wiki_1 = {}
let wiki_1.path = '~/school.wiki/'
let wiki_1.index = 'Home'
let wiki_1.syntax = 'markdown'
let wiki_1.ext = '.md'
let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp'}
let wiki_2 = {}
let wiki_2.path = '~/project_docs/'
let wiki_2.index = 'main'
let g:vimwiki_list = [wiki_1, wiki_2]
let g:vimwiki_ext2syntax = {'.md': 'markdown', 
                          \ '.mkd': 'markdown',
                          \ '.wiki': 'media'}
" ------
" tagbar
" ------
nmap <F8> :TagbarToggle<CR>
" ======
" neovim
" ======
if has('nvim')
  autocmd! BufWritePost *.c++,*.c,*.cpp,*.py,*.js Neomake
endif
